# <!-- 由 BMAD™ 核心驱动 -->
workflow:
  id: game-dev-greenfield
  name: 游戏开发 - 绿地项目
  description: 使用 Phaser 3 和 TypeScript 从概念到实施创建 2D 游戏的专业工作流程。指导团队完成游戏概念开发、设计文档、技术架构和故事驱动的开发，以实现专业游戏开发。
  type: greenfield
  project_types:
    - 独立游戏
    - 手机游戏
    - 网页游戏
    - 教育游戏
    - 原型游戏
    - 游戏果酱
  full_game_sequence:
    - agent: game-designer
      creates: game-brief.md
      optional_steps:
        - brainstorming_session
        - game_research_prompt
        - player_research
      notes: "从头脑风暴游戏概念开始，然后创建全面的游戏简介。保存输出：将最终的 game-brief.md 复制到您项目的 docs/design/ 文件夹中。"
    - agent: game-designer
      creates: game-design-doc.md
      requires: game-brief.md
      optional_steps:
        - competitive_analysis
        - technical_research
      notes: "使用 game-design-doc-tmpl 创建详细的游戏设计文档。定义所有游戏机制、进程和技术要求。保存输出：将最终的 game-design-doc.md 复制到您项目的 docs/design/ 文件夹中。"
    - agent: game-designer
      creates: level-design-doc.md
      requires: game-design-doc.md
      optional_steps:
        - level_prototyping
        - difficulty_analysis
      notes: "使用 level-design-doc-tmpl 创建关卡设计框架。建立内容创作指南和性能要求。保存输出：将最终的 level-design-doc.md 复制到您项目的 docs/design/ 文件夹中。"
    - agent: solution-architect
      creates: game-architecture.md
      requires:
        - game-design-doc.md
        - level-design-doc.md
      optional_steps:
        - technical_research_prompt
        - performance_analysis
        - platform_research
      notes: "使用 game-architecture-tmpl 创建全面的技术架构。定义 Phaser 3 系统、性能优化和代码结构。保存输出：将最终的 game-architecture.md 复制到您项目的 docs/architecture/ 文件夹中。"
    - agent: game-designer
      validates: design_consistency
      requires: all_design_documents
      uses: game-design-checklist
      notes: 验证所有设计文档的一致性、完整性和可实施性。可能需要更新任何设计文档。
    - agent: various
      updates: flagged_design_documents
      condition: design_validation_issues
      notes: 如果设计验证发现问题，返回相关代理修复并重新将更新后的文档保存到 docs/ 文件夹中。
  project_setup_guidance:
    action: guide_game_project_structure
    notes: 按照游戏架构文档设置游戏项目结构。创建 src/、assets/、docs/ 和 tests/ 目录。初始化 TypeScript 和 Phaser 3 配置。
  workflow_end:
    action: move_to_story_development
    notes: 所有设计产物均已完成。开始故事驱动的开发阶段。使用游戏 Scrum Master 从设计文档创建实施故事。
  prototype_sequence:
    - step: prototype_scope
      action: assess_prototype_complexity
      notes: 首先，评估这是否需要完整的游戏设计（使用 full_game_sequence）或者可以是一个快速原型。
    - agent: game-designer
      creates: game-brief.md
      optional_steps:
        - quick_brainstorming
        - concept_validation
      notes: "为原型创建专注的游戏简介。强调核心机制和即可玩性。保存输出：将最终的 game-brief.md 复制到您项目的 docs/ 文件夹中。"
    - agent: game-designer
      creates: prototype-design.md
      uses: create-doc prototype-design OR create-game-story
      requires: game-brief.md
      notes: 创建最小化的设计文档或直接跳到实施故事以进行快速原型制作。根据原型复杂性选择。
  prototype_workflow_end:
    action: move_to_rapid_implementation
    notes: 原型已定义。与游戏开发者一起开始立即实施。首先关注核心机制，然后根据游戏测试进行迭代。
  flow_diagram: |
    ```mermaid
    graph TD
        A[Start: Game Development Project] --> B{Project Scope?}
        B -->|Full Game/Production| C[game-designer: game-brief.md]
        B -->|Prototype/Game Jam| D[game-designer: focused game-brief.md]

        C --> E[game-designer: game-design-doc.md]
        E --> F[game-designer: level-design-doc.md]
        F --> G[solution-architect: game-architecture.md]
        G --> H[game-designer: validate design consistency]
        H --> I{Design validation issues?}
        I -->|Yes| J[Return to relevant agent for fixes]
        I -->|No| K[Set up game project structure]
        J --> H
        K --> L[Move to Story Development Phase]

        D --> M[game-designer: prototype-design.md]
        M --> N[Move to Rapid Implementation]

        C -.-> C1[Optional: brainstorming]
        C -.-> C2[Optional: game research]
        E -.-> E1[Optional: competitive analysis]
        F -.-> F1[Optional: level prototyping]
        G -.-> G1[Optional: technical research]
        D -.-> D1[Optional: quick brainstorming]

        style L fill:#90EE90
        style N fill:#90EE90
        style C fill:#FFE4B5
        style E fill:#FFE4B5
        style F fill:#FFE4B5
        style G fill:#FFE4B5
        style D fill:#FFB6C1
        style M fill:#FFB6C1
    ```
  decision_guidance:
    use_full_sequence_when:
      - 构建商业或生产级游戏
      - 涉及多个团队成员
      - 复杂的游戏系统（3个以上核心机制）
      - 长期开发时间表（2个月以上）
      - 需要全面的文档以进行团队协调
      - 针对多个平台
      - 教育或企业游戏项目
    use_prototype_sequence_when:
      - 游戏果酱或时间受限的开发
      - 独立开发者或非常小的团队
      - 实验性或概念验证游戏
      - 简单的机制（1-2个核心系统）
      - 快速验证游戏概念
      - 学习项目或技术演示
  handoff_prompts:
    designer_to_gdd: 游戏简介已完成。将其另存为项目中的 docs/design/game-brief.md，然后创建全面的游戏设计文档。
    gdd_to_level: 游戏设计文档已准备好。将其另存为 docs/design/game-design-doc.md，然后创建关卡设计框架。
    level_to_architect: 关卡设计已完成。将其另存为 docs/design/level-design-doc.md，然后创建技术架构。
    architect_review: 架构已完成。将其另存为 docs/architecture/game-architecture.md。请验证所有设计文档的一致性。
    validation_issues: 设计验证发现 [document] 存在问题。请返回 [agent] 修复并重新保存更新后的文档。
    full_complete: 所有设计产物均已验证并保存。设置游戏项目结构并进入故事开发阶段。
    prototype_designer_to_dev: 原型简介已完成。将其另存为 docs/game-brief.md，然后创建最小化的设计或直接跳到实施故事。
    prototype_complete: 原型已定义。开始快速实施，重点关注核心机制和即可玩性。
  story_development_guidance:
    epic_breakdown:
      - 核心游戏系统" - 基础游戏机制和玩家控制
      - 关卡内容" - 单个关卡、进程和内容实施
      - 用户界面" - 菜单、HUD、设置和玩家反馈系统
      - 音频集成" - 音乐、音效和音频系统
      - 性能优化" - 平台优化和技术润色
      - 游戏润色" - 视觉效果、动画和最终用户体验
    story_creation_process:
      - 使用游戏 Scrum Master 创建详细的实施故事
      - 每个故事都应引用特定的 GDD 部分
      - 包括性能要求（60 FPS 目标）
      - 指定 Phaser 3 实施细节
      - 应用 game-story-dod-checklist 进行质量验证
      - 确保故事可由游戏开发者立即执行
  game_development_best_practices:
    performance_targets:
      - 在整个开发过程中在目标设备上保持 60 FPS
      - 每个游戏系统的内存使用量低于指定限制
      - 关卡加载时间低于3秒
      - 流畅的动画和响应迅速的玩家控制
    technical_standards:
      - 符合 TypeScript 严格模式
      - 基于组件的游戏架构
      - 对性能关键对象使用对象池
      - 跨平台输入处理
      - 全面的错误处理和优雅降级
    playtesting_integration:
      - 尽早并频繁地测试核心机制
      - 通过指标和玩家反馈验证游戏平衡
      - 根据实施发现进行设计迭代
      - 记录设计变更和理由
  success_criteria:
    design_phase_complete:
      - 所有设计文档均已创建并验证
      - 技术架构与游戏设计要求保持一致
      - 定义了可实现的性能目标
      - 故事分解已准备好实施
      - 已建立项目结构
    implementation_readiness:
      - 已为 Phaser 3 + TypeScript 配置开发环境
      - 已建立资产管道和构建系统
      - 测试框架已到位
      - 定义了团队角色和职责
      - 已创建并准备好第一个实施故事
